@model RealStateApp.Core.Application.ViewModels.Propiedades.PropiedadViewModel;
@using RealStateApp.Core.Application.Enums;
@using RealStateApp.Core.Application.ViewModels.PropertyImages;

@{
    ViewData["Title"] = "Mantenimiento Propiedades";
}

@section Scripts{
    <script>
        const slideshow = document.querySelector(".slideshow");
        const list = document.querySelector(".slideshow .slides");
        const btns = document.querySelectorAll(".slideshow .arrows .arrow");
        const prevBtn = document.querySelector(".slideshow .arrow-prev");
        const prevBtnChild = document.querySelector(".slideshow .arrow-prev span");
        const nextBtn = document.querySelector(".slideshow .arrow-next");
        const nextBtnChild = document.querySelector(".slideshow .arrow-next span");
        const main = document.querySelector("main");
        const autoplayInterval = parseInt(slideshow.dataset.autoplayInterval) || 4000;
        const isActive = "is-active";
        const isVisible = "is-visible";
        let intervalID;

        window.addEventListener("load", () => {
            changeSlide();
            autoPlay();
            stopAutoPlayOnHover();
            customizeArrows();
        });

        function changeSlide() {
            for (const btn of btns) {
                btn.addEventListener("click", e => {
                    const activeSlide = document.querySelector(".slide.is-active");
                    activeSlide.classList.remove(isActive);
                    if (e.currentTarget === nextBtn) {
                        activeSlide.nextElementSibling
                            ? activeSlide.nextElementSibling.classList.add(isActive)
                            : list.firstElementChild.classList.add(isActive);
                    } else {
                        activeSlide.previousElementSibling
                            ? activeSlide.previousElementSibling.classList.add(isActive)
                            : list.lastElementChild.classList.add(isActive);
                    }
                });
            }
        }

        function autoPlay() {
            if (slideshow.dataset.autoplay === "true") {
                intervalID = setInterval(() => {
                    nextBtn.click();
                }, autoplayInterval);
            }
        }

        function stopAutoPlayOnHover() {
            if (
                slideshow.dataset.autoplay === "true" &&
                slideshow.dataset.stopAutoplayOnHover === "true"
            ) {
                slideshow.addEventListener("mouseenter", () => {
                    clearInterval(intervalID);
                });

                slideshow.addEventListener("touchstart", () => {
                    clearInterval(intervalID);
                });
            }
        }

        function customizeArrows() {
            slideshow.addEventListener("mousemove", mousemoveHandler);
            slideshow.addEventListener("touchmove", mousemoveHandler);
            slideshow.addEventListener("mouseleave", mouseleaveHandler);
            main.addEventListener("touchstart", mouseleaveHandler);
        }

        function mousemoveHandler(e) {
            const width = this.offsetWidth;
            const xPos = e.pageX;
            const yPos = e.pageY;
            const xPos2 = e.pageX - nextBtn.offsetLeft - nextBtnChild.offsetWidth;

            if (xPos > width / 2) {
                prevBtn.classList.remove(isVisible);
                nextBtn.classList.add(isVisible);

                nextBtnChild.style.left = `${xPos2}px`;
                nextBtnChild.style.top = `${yPos}px`;
            } else {
                nextBtn.classList.remove(isVisible);
                prevBtn.classList.add(isVisible);

                prevBtnChild.style.left = `${xPos}px`;
                prevBtnChild.style.top = `${yPos}px`;
            }
        }

        function mouseleaveHandler() {
            prevBtn.classList.remove(isVisible);
            nextBtn.classList.remove(isVisible);
        }
    </script>
}



<div class="card text-center">
  <div class="card-header">
    Detalles de la propiedaad
  </div>
    <div class="slideshow">
        <ul class="slides">
            @foreach (PropertyImagesViewModel item in Model.Imagenes)
            {
                <li class="slide is-active">
                    <div class="cover"
                     style="background-image: url(@item.ImagePath);"></div>
                </li>
            }
        </ul>
        <div class="arrows">
            <button class="arrow arrow-prev">
                <span></span>
            </button>
            <button class="arrow arrow-next">
                <span></span>
            </button>
        </div>
    </div>
    <main>

    </main>
    <footer>
    </footer>

  <div class="card-footer text-muted">
        <p>Tipo de propiedad: @Model.PropiedadType.Nombre</p>
        <p>Tipo de venta: @Model.VentaType.Nombre</p>
        <p>Código: @Model.UnicDigitSequence</p>
        <p>Valor: @Model.Precio</p>
        <p>Baños: @Model.QuantityBaños</p>
        <p>Habitaciones: @Model.QuantityHabitaciones</p>
        <p>Tamaño: @Model.MtsTerrain</p>
        <p>Descripcion: @Model.Descripcion</p>

  </div>
  <ul class="list-group">
    @foreach (var item in Model.PropiedadMejoras)
    {
      <li class="list-group-item">@item.Mejora.Nombre</li>
    }            
</ul>
</div>

<div class="container-fluid">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
        <div class="col">
            <div class="card shadow-sm">
                <img src="@Model.Agente.ImagePath" class="card-img-top" alt="">
                <div class="card-body">
                    <h4>@Model.Agente.FirstName</h4>
                    <p>Apellido: @Model.Agente.LastName</p>
                    <p>Correo: @Model.Agente.Email</p>
                    <p>Cédula: @Model.Agente.Cedula</p>
                    <p>Usuario: @Model.Agente.UserName</p>
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="btn-group">
                        </div>
                    </div>
                </div>
            </div>
        </div>
      </div>
   </div>

